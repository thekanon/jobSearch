{
  "id": "backendDeveloper",
  "name": "백엔드 개발자",
  "generalFeatures": [
    "백엔드 개발자는 서버, 데이터베이스와 애플리케이션 서버 로직을 다룹니다.",
    "다양한 서버 언어와 프레임워크를 사용하며, 데이터를 효율적으로 관리해야 해요.",
    "시스템 아키텍처 설계 능력이 중요해요. 확장성 있는 시스템을 만들 수 있어야 하죠.",
    "안정성과 보안에 대한 지식이 필요해요. 사용자의 정보를 안전하게 보호해야 하니까요.",
    "프론트엔드 개발자와의 협업 능력도 중요해요. API를 통해 정보를 제공하고 연동해야 하니까요.",
    "빠르게 변화하는 기술 트렌드를 따라가는 자세가 필요해요.",
    "코드의 품질과 테스트, 유지보수가 중요한 업무 중 하나에요."
  ],
  "technicalQuestions": [
    {
      "question": "RESTful API와 GraphQL의 차이점은 무엇인가요?",
      "intention": "API 설계 패러다임에 대한 이해를 평가하려고 해요.",
      "exampleAnswer": "RESTful API는 자원 기반의 구조로, HTTP 요청 유형(GET, POST 등)을 통해 자원을 처리합니다. 반면, GraphQL은 단일 엔드포인트를 사용하고 클라이언트가 필요한 데이터만을 명시하여 요청할 수 있습니다. GraphQL은 오버패칭과 언더패칭 문제를 해결하며, 복잡한 시스템에서 더 유연하게 데이터를 관리할 수 있습니다."
    },
    {
      "question": "데이터베이스 인덱싱은 왜 중요한가요?",
      "intention": "데이터베이스 성능 최적화에 대한 지식을 평가하려고 해요.",
      "exampleAnswer": "데이터베이스 인덱싱은 데이터 검색 속도를 획기적으로 향상시키기 위해 사용됩니다. 인덱스는 데이터베이스 내에서 특정 컬럼의 데이터를 빠르게 찾을 수 있도록 도와주며, 이는 대규모 데이터를 처리할 때 효율성을 크게 높여줍니다. 하지만 과도한 인덱싱은 저장 공간을 사용하고, 쓰기 작업을 느리게 할 수 있으므로 적절한 인덱싱 전략이 중요합니다."
    },
    {
      "question": "마이크로서비스 아키텍처의 장단점은 무엇인가요?",
      "intention": "시스템 아키텍처에 대한 이해도를 확인하려고 해요.",
      "exampleAnswer": "마이크로서비스 아키텍처의 장점은 각 서비스의 독립성과 확장성입니다. 서비스들이 분리되어 있어 하나의 컴포넌트에 문제가 생겨도 전체 시스템에 영향을 미치지 않습니다. 또한, 다양한 기술 스택을 사용할 수 있습니다. 단점으로는 복잡한 서비스 간 통신과 데이터 관리, 그리고 통합 테스트의 어려움이 있습니다."
    },
    {
      "question": "트랜잭션의 ACID 속성에 대해 설명해주세요.",
      "intention": "데이터의 일관성과 무결성을 유지하는 방법에 대한 이해를 평가하려고 해요.",
      "exampleAnswer": "트랜잭션의 ACID 속성은 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), 지속성(Durability)을 의미합니다. 원자성은 트랜잭션이 전부 실행되거나 전혀 실행되지 않는 것을 보장합니다. 일관성은 트랜잭션이 데이터베이스의 일관된 상태를 유지하도록 합니다. 고립성은 동시에 실행되는 트랜잭션이 서로 영향을 미치지 않도록 보장합니다. 지속성은 완료된 트랜잭션의 결과가 영구적으로 반영되는 것을 의미합니다."
    }
  ],
  "nonTechnicalQuestions": [
    {
      "question": "팀 프로젝트에서 가장 어려웠던 경험은 무엇이었나요?",
      "intention": "팀 내에서의 협업과 문제 해결 능력을 알아보려고 해요.",
      "exampleAnswer": "한 팀 프로젝트에서 의사소통 문제로 인해 프로젝트 일정이 지연되었습니다. 저는 팀 내 미팅을 주도하여 각자의 업무 상황을 명확히 공유하고, 업무 분담을 재조정했습니다. 또한, 프로젝트 관리 도구를 활용하여 업무 진행 상황을 투명하게 만들어, 팀원 간의 신뢰를 회복하고 프로젝트를 성공적으로 완수할 수 있었습니다."
    },
    {
      "question": "어떻게 지속적으로 기술을 학습하고 있나요?",
      "intention": "지속적인 자기계발 능력과 열정을 확인하려고 해요.",
      "exampleAnswer": "저는 온라인 강의, 공식 문서, 그리고 개발 커뮤니티를 통해 지속적으로 새로운 기술을 학습하고 있습니다. 예를 들어, 최근에는 Docker와 Kubernetes에 대해 배우고 있으며, 이를 통해 컨테이너화된 애플리케이션의 배포와 관리에 대한 이해를 높이고 있습니다. 또한, 실제 프로젝트에 이러한 새로운 기술을 적용해보며, 이론과 실습을 병행하고 있습니다."
    },
    {
      "question": "지금까지의 경력 중 가장 자랑할 만한 프로젝트는 무엇인가요?",
      "intention": "개인의 업무 업적과 성공 경험을 들어보려고 해요.",
      "exampleAnswer": "제 경력에서 가장 자랑스러운 프로젝트는 대규모 데이터 처리를 위한 백엔드 시스템을 설계하고 구현한 것입니다. 이 프로젝트에서 저는 고성능 데이터 처리를 위해 비동기 처리와 캐싱 전략을 성공적으로 적용했습니다. 이를 통해 시스템의 처리 능력을 크게 향상시켰으며, 이 프로젝트는 회사의 데이터 처리 효율성을 크게 개선하는 데 기여했습니다."
    }
  ]
}