{
  "id": "frontendDeveloper",
  "name": "프론트엔드 개발자",
  "generalFeatures": [
    "일반적으로 면접 질문보다는 포트폴리오에 대한 질문을 많이 해요. 실제로 만든 작품을 통해 능력을 보여주는 게 중요하죠!",
    "프론트엔드 개발자는 사용자가 보는 화면을 만들어요. 디자인과 기술을 모두 잘 다룰 수 있어야 해요.",
    "프론트엔드 개발자는 사용자 경험을 개선하는 데에도 관심을 가져야 해요. 사용자가 편리하게 서비스를 이용할 수 있도록 해야죠.",
    "비전공자가 많이 도전하는 직무지만 많은 기업들이 비전공자를 선호하지 않아요. 기본적인 CS 지식을 갖추는 게 중요해요.",
    "코드 작성 능력뿐만 아니라 디자인 감각도 중요해요. 사용자가 좋아할 디자인을 만들 수 있어야 해요.",
    "프론트엔드는 기술이 빠르게 변화해요. 최신 트렌드와 기술을 계속 배우는 자세가 필요해요!",
    "협업 능력도 중요한데, 디자이너, 백엔드 개발자와 원활하게 소통할 수 있어야 프로젝트가 순탄하게 진행되죠."
  ],
  "technicalQuestions": [
    {
      "question": "HTML5에서 새로 나온 기능은 뭔가요?",
      "intention": "HTML5에 얼마나 익숙한지 알아보려고 하는 거에요. 뭐, 최신 웹 기술에 뒤쳐지면 안 되잖아요?",
      "exampleAnswer": "HTML5는 기존 HTML보다 훨씬 풍부한 웹 경험을 제공합니다. 예를 들어, <canvas> 태그를 통해 그래픽과 애니메이션을 직접 그릴 수 있고, <video> 및 <audio> 태그로 멀티미디어 콘텐츠를 쉽게 통합할 수 있습니다. 또한, 지역 저장소(local storage)를 사용하여 더 나은 사용자 경험을 제공할 수 있죠."
    },
    {
      "question": "CSS의 Flexbox를 어떻게 쓰는지 아세요?",
      "intention": "반응형 디자인에 대한 이해도를 확인하려고 해요. 다양한 화면에서도 멋지게 보여야 하니까요!",
      "exampleAnswer": "Flexbox는 반응형 웹 디자인을 위한 강력한 CSS 도구입니다. 이를 사용하여 요소들을 유연하게 배치할 수 있습니다. 예를 들어, display: flex;를 설정하면 컨테이너 내의 아이템들을 수평 또는 수직으로 정렬할 수 있으며, flex-grow와 flex-shrink 속성을 사용하여 아이템들의 크기를 조절할 수 있죠."
    },
    {
      "question": "React의 라이프사이클 메서드에 대해 설명해주세요.",
      "intention": "React 컴포넌트의 생명주기 이해도를 확인하려고 해요.",
      "exampleAnswer": "React의 라이프사이클 메서드는 컴포넌트의 생성부터 파기까지 다양한 단계에서 호출됩니다. 예를 들어, componentDidMount는 컴포넌트가 DOM에 삽입된 후에 실행되며, componentDidUpdate는 컴포넌트 업데이트 후에 호출됩니다. 이러한 메서드들을 활용하여 데이터 로딩, 이벤트 리스닝 등을 처리할 수 있습니다."
    },
    {
      "question": "웹 접근성이 중요한 이유는 무엇인가요?",
      "intention": "웹 접근성의 중요성에 대한 이해를 확인하려고 해요.",
      "exampleAnswer": "웹 접근성은 모든 사용자가 웹사이트를 동등하게 이용할 수 있도록 하는 것을 목표로 합니다. 이는 장애를 가진 사용자들도 웹 콘텐츠와 기능을 이용할 수 있게 해주며, 법적 요구사항을 충족시키고, 더 넓은 사용자층에 도달할 수 있도록 해줍니다. 예를 들어, 스크린 리더 호환성과 키보드 내비게이션은 웹 접근성의 중요한 요소입니다."
    },
    {
      "question": "JavaScript의 클로저에 대해 설명해주세요.",
      "intention": "클로저의 작동 방식과 사용 사례에 대한 이해를 확인하려고 해요.",
      "exampleAnswer": "클로저는 함수가 선언될 때의 환경을 '기억'하는 JavaScript의 기능입니다. 함수가 생성될 때, 그 함수는 주변의 변수에 접근할 수 있는 범위를 생성합니다. 이후에도 이 범위에 접근할 수 있기 때문에, 클로저를 사용하면 데이터를 숨기거나, 상태를 유지하는 등의 기능을 구현할 수 있습니다."
    },
    {
      "question": "성능 최적화를 위해 어떤 전략을 사용하나요?",
      "intention": "웹 애플리케이션의 성능을 향상시키는 방법에 대한 지식을 평가하려고 해요.",
      "exampleAnswer": "성능 최적화를 위해 여러 전략을 사용합니다. 예를 들어, 이미지와 파일 압축, 캐싱 전략, 비동기 로딩, 코드 분할 등을 통해 로딩 시간을 줄입니다. 또한, 불필요한 리렌더링을 방지하고, 효율적인 자료구조와 알고리즘을 사용하여 브라우저의 성능 부담을 최소화합니다."
    }
  ],
  "nonTechnicalQuestions": [
    {
      "question": "팀에서 어떤 역할을 맡고, 어떻게 협업했나요?",
      "intention": "팀워크나 커뮤니케이션 능력을 알아보려고 해요. 함께 일하면서 얼마나 잘 어울렸는지 궁금하네요!",
      "exampleAnswer": "제가 팀에서 주로 맡는 역할은 프로젝트 리더와 개발자입니다. 프로젝트 관리를 하면서 목표 설정, 업무 분담, 진행 상황 점검 등을 담당합니다. 또한, 팀원 간의 원활한 커뮤니케이션을 위해 정기적인 회의와 상호 피드백을 적극적으로 실시합니다."
    },
    {
      "question": "고객이 어려워할 때 어떻게 대응했나요?",
      "intention": "고객과의 상황 대처 능력을 볼려고 해요. 어떻게 고객의 마음을 얻었는지 궁금해요!",
      "exampleAnswer": "고객이 어려움을 겪을 때, 먼저 그들의 문제를 철저히 이해하려 노력합니다. 그 후, 문제를 명확하고 이해하기 쉬운 방식으로 설명하고, 가능한 해결책을 제시합니다. 고객의 입장에서 생각하며, 빠르고 효율적인 해결 방안을 모색합니다."
    },
    {
      "question": "어떤 프로젝트가 가장 기억에 남나요?",
      "intention": "경력 중 중요하게 생각하는 프로젝트와 그 이유를 알고 싶어요.",
      "exampleAnswer": "가장 기억에 남는 프로젝트는 대규모 이커머스 웹사이트 개발 프로젝트였습니다. 이 프로젝트에서 저는 프론트엔드 개발을 담당했으며, 사용자 경험과 성능 최적화에 중점을 뒀습니다. 이 프로젝트를 통해 저는 팀워크와 기술적 역량을 크게 향상시켰습니다."
    },
    {
      "question": "시간 관리는 어떻게 하나요?",
      "intention": "개인의 시간 관리 능력을 알아보려고 해요.",
      "exampleAnswer": "저는 효과적인 시간 관리를 위해 업무 목록을 작성하고 우선순위를 설정합니다. 중요한 작업에 집중할 수 있도록 시간을 할당하고, 정기적으로 업무 진행 상황을 검토합니다. 또한, 일정 관리 도구를 활용하여 일정을 체계적으로 관리합니다."
    },
    {
      "question": "실패한 프로젝트 경험이 있다면 어떻게 대처했나요?",
      "intention": "실패한 경험을 어떻게 극복하고 성장했는지 알아보려고 해요.",
      "exampleAnswer": "과거에 프로젝트 기한을 맞추지 못한 적이 있습니다. 이를 극복하기 위해, 먼저 실패의 원인을 분석했습니다. 그 후, 더 효율적인 프로젝트 관리 방법과 리스크 관리 전략을 도입하여 유사한 문제가 재발하지 않도록 조치했습니다."
    },
    {
      "question": "어떻게 새로운 기술을 배워나가나요?",
      "intention": "새로운 기술 학습 방법과 자기 주도 학습 능력을 평가하려고 해요.",
      "exampleAnswer": "새로운 기술을 배울 때 저는 공식 문서와 온라인 튜토리얼을 활용합니다. 먼저 기본 개념을 익힌 후, 실제 프로젝트에 적용해보며 실력을 키웁니다. 예를 들어, 최근에 React Hooks를 배울 때는 공식 문서를 통해 개념을 이해하고, 간단한 프로젝트를 만들어 실제로 사용해봄으로써 더 깊은 이해를 얻었습니다. 또한, 커뮤니티와 포럼에서 다른 개발자들과 지식을 공유하며 추가적인 통찰력을 얻는 것도 중요하다고 생각합니다."
    }
  ]
}